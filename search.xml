<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown的语法规则</title>
    <url>//post/markdown-de-yu-fa-gui-ze.html</url>
    <content><![CDATA[<p>Markdown，一种十分方便，排版语法十分简洁的一种轻量级语言。</p>
<span id="more"></span>
<p><code>Markdown</code>是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与 <code>HTML</code> 混编，可导出 <code>HTML、PDF</code> 以及本身的 <code>.md</code> 格式的文件。因简洁、高效、易读、易写，<code>Markdown</code>被大量使用，如<code>Github、Wikipedia、简书</code>等</p>
<h1 id="Markdown的基本语法"><a href="#Markdown的基本语法" class="headerlink" title="Markdown的基本语法"></a>Markdown的基本语法</h1><hr>
<h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><p>要创建标题，请在单词或短语前面添加井号（#）。#的数量代表了标题的级别。<br>例如，添加三个#表示创建一个三级标题(<code>&lt;h3&gt;</code>)(例如：<code>### 我的三级标题</code>).</p>
<hr>
<h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><p>要创建段落，请使用空白行将一行或多行文本进行分隔。而且无需使用空格(<code>spaces</code>)或制表符(<code>tabs</code>)缩进段落。</p>
<hr>
<h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车即可完成换行(<code>&lt;br&gt;</code>)。</p>
<hr>
<h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><p><strong>强调</strong>：将文本字体设置为自己想要的粗体或斜体用来表示其重要性。</p>
<h3 id="粗体-Bold"><a href="#粗体-Bold" class="headerlink" title="粗体(Bold)"></a>粗体(Bold)</h3><p>要加粗文本，请在单词或短语的前后各添加两个星号（asterisks）或下划线（underscores）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（asterisks）。例：<strong>粗体</strong>;</p>
<h3 id="斜体-Italic"><a href="#斜体-Italic" class="headerlink" title="斜体(Italic)"></a>斜体(Italic)</h3><p>要用斜体显示文本，请在单词或短语前后添加一个星号（asterisk）或下划线（underscore）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。例：<em>斜体</em>;</p>
<hr>
<h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><p>要创建引用，只需要在需要引用的文段前面加上一个 <code>&gt;</code> 符号即可创建一个引用模块。</p>
<h3 id="多个段落的块的引用"><a href="#多个段落的块的引用" class="headerlink" title="多个段落的块的引用"></a>多个段落的块的引用</h3><p>块的引用可以包含多个段落，为段落之间的空白行添加一个<code>&gt;</code>符号。</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; Dorothy followed her through many of the beautiful rooms in her castle.
&gt;
&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre>
<p><strong>渲染效果如下：</strong></p>
<blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>
</blockquote>
<h3 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h3><p>块引用可以嵌套。在要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号。</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; Dorothy followed her through many of the beautiful rooms in her castle.
&gt;
&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre>
<p><strong>渲染效果如下：</strong></p>
<blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
<blockquote>
<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>
</blockquote>
</blockquote>
<h3 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h3><p>块引用可以包含其他 <code>Markdown</code> 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; #### The quarterly results look great!
&gt;
&gt; - Revenue was off the chart.
&gt; - Profits were higher than ever.
&gt;
&gt;  *Everything* is going according to **plan**.</code></pre>
<p><strong>渲染效果如下：</strong></p>
<blockquote>
<h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul>
<li>Revenue was off the chart.</li>
<li>Profits were higher than ever.</li>
</ul>
<p> <em>Everything</em> is going according to <strong>plan</strong>.</p>
</blockquote>
<hr>
<h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><p>可以将多个条目组织成有序或无序列表。</p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p>
<h3 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h3><p>要在保留列表连续性的同时在列表中添加另一种元素，清将该元素缩进四个空格或一个制表符，如下例所示：</p>
<p><strong>段落</strong></p>
<pre class="line-numbers language-none"><code class="language-none">*   This is the first list item.
*   Here&#39;s the second list item.

    I need to add another paragraph below the second list item.

*   And here&#39;s the third list item.</code></pre>
<p><strong>渲染效果如下：</strong></p>
<ul>
<li><p>This is the first list item.</p>
</li>
<li><p>Here’s the second list item.</p>
<p>I need to add another paragraph below the second list item.</p>
</li>
<li><p>And here’s the third list item.</p>
</li>
</ul>
<p><strong>引用块</strong></p>
<pre class="line-numbers language-none"><code class="language-none">*   This is the first list item.
*   Here&#39;s the second list item.

    &gt; A blockquote would look great below the second list item.

*   And here&#39;s the third list item.</code></pre>
<p><strong>渲染效果如下：</strong></p>
<ul>
<li><p>This is the first list item.</p>
</li>
<li><p>Here’s the second list item.</p>
<blockquote>
<p>A blockquote would look great below the second list item.</p>
</blockquote>
</li>
<li><p>And here’s the third list item.</p>
</li>
</ul>
<p><strong>代码块</strong></p>
<pre class="line-numbers language-none"><code class="language-none">1.  Open the file.
2.  Find the following code block on line 21:

        &lt;html&gt;
          &lt;head&gt;
            &lt;title&gt;Test&lt;&#x2F;title&gt;
          &lt;&#x2F;head&gt;

3.  Update the title to match the name of your website.</code></pre>
<p><strong>渲染效果如下：</strong></p>
<ol>
<li><p>Open the file.</p>
</li>
<li><p>Find the following code block on line 21:</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
  &lt;/head&gt;
</code></pre>
</li>
<li><p>Update the title to match the name of your website.</p>
</li>
</ol>
<hr>
<h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。<br>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code><br>对应的HTML代码：<code>&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code><br><strong>示例：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">这是一个链接 [Markdown语法](https:&#x2F;&#x2F;markdown.com.cn)。</code></pre>
<p><strong>渲染效果如下：</strong><br>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a>。</p>
<h3 id="给链接增加一个Title"><a href="#给链接增加一个Title" class="headerlink" title="给链接增加一个Title"></a>给链接增加一个Title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。</p>
<pre class="line-numbers language-none"><code class="language-none">这是一个链接 [Markdown语法](https:&#x2F;&#x2F;markdown.com.cn &quot;markdown官方文档&quot;)。</code></pre>
<p><strong>渲染效果如下：</strong><br>这是一个链接 <a href="https://markdown.com.cn/" title="markdown官方文档">Markdown语法</a>。</p>
<h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p>
<pre class="line-numbers language-none"><code class="language-none">myBlog：&lt;https:&#x2F;&#x2F;oilpicture.github.io&#x2F;&gt;
myEmail：&lt;wz217110@163.com&gt;</code></pre>
<p><strong>渲染效果如下：</strong><br>myBlog：<a href="https://oilpicture.github.io/">https://oilpicture.github.io/</a><br>myEmail：<a href="mailto:&#119;&#122;&#x32;&#49;&#x37;&#49;&#49;&#x30;&#x40;&#x31;&#x36;&#x33;&#x2e;&#99;&#111;&#109;">&#119;&#122;&#x32;&#49;&#x37;&#49;&#49;&#x30;&#x40;&#x31;&#x36;&#x33;&#x2e;&#99;&#111;&#109;</a></p>
<hr>
<h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>要添加图像，请使用感叹号(<code>!</code>)，然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。<br>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">![这是图片](https:&#x2F;&#x2F;gitee.com&#x2F;cungudafa&#x2F;source&#x2F;raw&#x2F;master&#x2F;img&#x2F;bg&#x2F;hyo&#x2F;1.png &quot;Magic lady&quot;)</code></pre>
<p><strong>渲染效果如下：</strong><br><img src="https://gitee.com/cungudafa/source/raw/master/img/bg/hyo/1.png" alt="这是图片" title="Magic lady"></p>
<h3 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h3><p>给图片增加链接，请将图像的 <code>Markdown</code> 括在方括号中，然后将链接添加在圆括号中。</p>
<pre class="line-numbers language-none"><code class="language-none">[![哔哩哔哩](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Tokisaki-Galaxy&#x2F;res&#x2F;site&#x2F;medias&#x2F;background.jpg &quot;two space&quot;)](https:&#x2F;&#x2F;www.bilibili.com&#x2F;)</code></pre>
<p><strong>渲染效果如下：</strong><br><a href="https://www.bilibili.com/"><img src="https://cdn.jsdelivr.net/gh/Tokisaki-Galaxy/res/site/medias/background.jpg" alt="哔哩哔哩" title="two space"></a></p>
<hr>
<h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>详细内容请查阅：<a href="https://markdown.com.cn/">Markdown官方教程</a></p>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo进阶之各种优化</title>
    <url>//post/hello-world.html</url>
    <content><![CDATA[<h2 id="1-npm速度优化"><a href="#1-npm速度优化" class="headerlink" title="1.npm速度优化"></a>1.npm速度优化</h2><hr>
<blockquote>
<p>大家在使用hexo的时候，肯定经常要和npm打交道，需要用到它去下载一些东西，但npm的下载速度确实有点不尽如人意。<br>因为我们在使用hexo时，会需要用到npm去安装较多的插件，所以我们需要修改npm的仓库地址，以便能达到更快的安装速度。</p>
</blockquote>
<ul>
<li>阿里的淘宝团队在国内做了个跟npm仓库一样的镜像叫<code>cnpm</code>；</li>
<li>淘宝镜像与npm官方包的同步频率目前为10分钟一次，来保证尽量与官方服务同步；</li>
<li>所以说<code>npm</code>和<code>cnpm</code>两者之间可以说是一样的，不会有什么差别。</li>
</ul>
<h3 id="通过改变地址来使用淘宝镜像（推荐）"><a href="#通过改变地址来使用淘宝镜像（推荐）" class="headerlink" title="通过改变地址来使用淘宝镜像（推荐）"></a>通过改变地址来使用淘宝镜像（推荐）</h3><ul>
<li>npm的默认仓库地址是 <code>https://registry.npmjs.org/</code></li>
<li>可以使用以下命令查看当前npm的仓库地址<pre class="line-numbers language-none"><code class="language-none">npm config get registry</code></pre></li>
<li>可以使用以下命令来改变默认下载地址，从而达到不安装cnpm就能采用淘宝镜像的目的，然后使用上面的get命令查看是否设置成功。<pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre>
<h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3></li>
<li>安装cnpm，命令行代码：<pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre></li>
<li>安装完成之后，可使用以下代码检查是否安装成功，安装成功之后，输入以下代码，则会出现版本号<pre class="line-numbers language-none"><code class="language-none">cnpm -v</code></pre></li>
<li>成功安装之后，就可以使用<code>cnpm</code>去代替<code>npm</code>来执行安装命令了</li>
</ul>
<hr>
<h2 id="2-访问速度的优化"><a href="#2-访问速度的优化" class="headerlink" title="2.访问速度的优化"></a>2.访问速度的优化</h2><hr>
<h3 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h3><p>在做图片加载优化之前，让我们了解一下<code>预加载</code>和<code>懒加载</code>.</p>
<hr>
<h4 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h4><p><code>预加载</code>是一种在进入项目前提前进行资源加载的一种加载形式，避免在项目中加载缓慢，影响用户体验。</p>
<ul>
<li>缺点：会增加网站服务器的压力<h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><code>懒加载</code>一般是当图片滚动进可视化窗口内才加载图片，可视窗口之外的图片则不加载。</li>
<li>优点：对服务器有一定缓解压力的作用</li>
</ul>
<p>我所使用的<a href="https://github.com/blinkfox/hexo-theme-matery">matery主题</a>整体采用预加载的模式，这样可以在我们访问其他页面的时候会稍微快一点，我们可以在这个基础上对图片进行懒加载，这样做效果就是html、css、js加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p>
<h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><ul>
<li><p>首先安装图片懒加载插件：<a href="https://github.com/Troy-Yang/hexo-lazyload-image">hexo-lazyload-image</a></p>
</li>
<li><p>在Hexo的根目录执行以下代码操作：</p>
<pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-lazyload-image --save</code></pre></li>
<li><p>然后在hexo配置文件<code>_config.yml</code>末尾添加以下代码：</p>
<pre class="line-numbers language-none"><code class="language-none">lazyload:
  enable: true 
  onlypost: false  # 是否只对文章的图片做懒加载
  loadingImg: # eg .&#x2F;images&#x2F;loading.gif</code></pre></li>
<li><p>到这里就配置完了，执行<code>hexo cl&amp;&amp;hexo g &amp;&amp; hexo s</code>就有效果了，以后博客上的图片就都是懒加载了，以上步骤理论上任何主题都可以用</p>
</li>
<li><p>一般情况下懒加载会和<code>gallery</code>插件会发生冲突，结果可能就是点开图片，左翻右翻都是<code>loading image</code>。</p>
</li>
<li><p>matery主题的解决方案是：修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code> 文件<br>在第108行加上：</p>
<pre class="line-numbers language-none"><code class="language-none">$(document).find(&#39;img[data-original]&#39;).each(function()&#123;
    $(this).parent().attr(&quot;href&quot;, $(this).attr(&quot;data-original&quot;));
&#125;);</code></pre></li>
<li><p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。</p>
</li>
<li><p>伪解决方案：打开 <code>/themes/matery/layout/_partial/header.ejs</code> 文件，</p>
</li>
<li><p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;brand-logo&quot;&gt;
    &lt;a href&#x3D;&quot;&lt;%- url_for() %&gt;&quot; class&#x3D;&quot;waves-effect waves-light&quot;&gt;
        &lt;div&gt;
            &lt;% if (theme.logo !&#x3D;&#x3D; undefined &amp;&amp; theme.logo.length &gt; 0) &#123; %&gt;
            &lt;img src&#x3D;&quot;&lt;%&#x3D; theme.logo %&gt;&quot; class&#x3D;&quot;logo-img&quot; alt&#x3D;&quot;LOGO&quot;&gt;
            &lt;% &#125; %&gt;
            &lt;span class&#x3D;&quot;logo-span&quot;&gt;&lt;%- config.title %&gt;&lt;&#x2F;span&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</code></pre>
<h4 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h4></li>
<li><p><code>hexo-lazyload-image</code> 插件提供了自定义<code>loading</code>图片的选项，方法就是在 <code>loadingImg</code> 后配置图片的路径就好了<br>Like this as follow：</p>
<pre class="line-numbers language-none"><code class="language-none">lazyload:
  enable: true 
  onlypost: false  # 是否只对文章的图片做懒加载
  loadingImg: &#x2F;medias&#x2F;loading.gif # eg .&#x2F;images&#x2F;loading.gif</code></pre>
<h4 id="懒加载优化"><a href="#懒加载优化" class="headerlink" title="懒加载优化"></a>懒加载优化</h4><blockquote>
<p>经过以上操作就已经很完美了，以下内容可做也可不做，depend on yourself！</p>
</blockquote>
</li>
<li><p>其实第一次加载后本地都是有缓存的，如果每次都把loading显示出来就不那么好看</p>
</li>
<li><p>所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画</p>
</li>
<li><p>打开 <code>Hexo根目录</code> &gt; <code>node_modules</code> &gt; <code>hexo-lazyload-image</code> &gt; <code>lib</code> &gt; <code>simple-lazyload.js</code> 文件</p>
</li>
<li><p>第9行修改为：</p>
<pre class="line-numbers language-none"><code class="language-none">&amp;&amp; rect.top &lt;&#x3D; (window.innerHeight +240 || document.documentElement.clientHeight +240)</code></pre></li>
<li><p>作用：提前240个像素加载图片,当然这个值也可以根据自己情况修改</p>
</li>
</ul>
<hr>
<h3 id="代码压缩优化"><a href="#代码压缩优化" class="headerlink" title="代码压缩优化"></a>代码压缩优化</h3><h4 id="为什么要压缩代码："><a href="#为什么要压缩代码：" class="headerlink" title="为什么要压缩代码："></a>为什么要压缩代码：</h4><p>因为<code>hexo</code>生成的<code>html、css、js</code>等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”。</p>
<p>有人说空格换行能占多少字节？确实占不了多少，但是一个人访问是这么多字节，那么一百人，一万人呢？加起来这量就不少了吧，这都是流量啊！这也是很多<code>css/js</code>文件的后缀为<code>*.min.js或*.min.css</code>的原因。虽然我们可能没那么多访问量，但是能减小一点资源文件的大小也是对访问速度有那么一点提升的。</p>
<h4 id="gulp实现代码压缩"><a href="#gulp实现代码压缩" class="headerlink" title="gulp实现代码压缩"></a>gulp实现代码压缩</h4><ul>
<li>在hexo的根目录执行以下命令：<pre class="line-numbers language-none"><code class="language-none"># 全局安装gulp模块
npm install gulp -g
# 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行
npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save
# 额外的功能模块
npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel&#x2F;core --save</code></pre></li>
<li>在Hexo根目录新建文件 <code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。<pre class="line-numbers language-none"><code class="language-none">var gulp &#x3D; require(&quot;gulp&quot;);
var debug &#x3D; require(&quot;gulp-debug&quot;);
var cleancss &#x3D; require(&quot;gulp-clean-css&quot;); &#x2F;&#x2F;css压缩组件
var uglify &#x3D; require(&quot;gulp-uglify&quot;); &#x2F;&#x2F;js压缩组件
var htmlmin &#x3D; require(&quot;gulp-htmlmin&quot;); &#x2F;&#x2F;html压缩组件
var htmlclean &#x3D; require(&quot;gulp-htmlclean&quot;); &#x2F;&#x2F;html清理组件
var imagemin &#x3D; require(&quot;gulp-imagemin&quot;); &#x2F;&#x2F;图片压缩组件
var changed &#x3D; require(&quot;gulp-changed&quot;); &#x2F;&#x2F;文件更改校验组件
var gulpif &#x3D; require(&quot;gulp-if&quot;); &#x2F;&#x2F;任务 帮助调用组件
var plumber &#x3D; require(&quot;gulp-plumber&quot;); &#x2F;&#x2F;容错组件（发生错误不跳出任务，并报出错误内容）
var isScriptAll &#x3D; true; &#x2F;&#x2F;是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)
var isDebug &#x3D; true; &#x2F;&#x2F;是否调试显示 编译通过的文件
var gulpBabel &#x3D; require(&quot;gulp-babel&quot;);
var es2015Preset &#x3D; require(&quot;babel-preset-es2015&quot;);
var del &#x3D; require(&quot;del&quot;);
var Hexo &#x3D; require(&quot;hexo&quot;);
var hexo &#x3D; new Hexo(process.cwd(), &#123;&#125;); &#x2F;&#x2F; 初始化一个hexo对象

&#x2F;&#x2F; 清除public文件夹
gulp.task(&quot;clean&quot;, function () &#123;
    return del([&quot;public&#x2F;**&#x2F;*&quot;]);
&#125;);

&#x2F;&#x2F; 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return
&#x2F;&#x2F; 创建静态页面 （等同 hexo generate）
gulp.task(&quot;generate&quot;, function () &#123;
    return hexo.init().then(function () &#123;
        return hexo
            .call(&quot;generate&quot;, &#123;
                watch: false
            &#125;)
            .then(function () &#123;
                return hexo.exit();
            &#125;)
            .catch(function (err) &#123;
                return hexo.exit(err);
            &#125;);
    &#125;);
&#125;);

&#x2F;&#x2F; 启动Hexo服务器
gulp.task(&quot;server&quot;, function () &#123;
    return hexo
        .init()
        .then(function () &#123;
            return hexo.call(&quot;server&quot;, &#123;&#125;);
        &#125;)
        .catch(function (err) &#123;
            console.log(err);
        &#125;);
&#125;);

&#x2F;&#x2F; 部署到服务器
gulp.task(&quot;deploy&quot;, function () &#123;
    return hexo.init().then(function () &#123;
        return hexo
            .call(&quot;deploy&quot;, &#123;
                watch: false
            &#125;)
            .then(function () &#123;
                return hexo.exit();
            &#125;)
            .catch(function (err) &#123;
                return hexo.exit(err);
            &#125;);
    &#125;);
&#125;);

&#x2F;&#x2F; 压缩public目录下的js文件
gulp.task(&quot;compressJs&quot;, function () &#123;
    return gulp
        .src([&quot;.&#x2F;public&#x2F;**&#x2F;*.js&quot;, &quot;!.&#x2F;public&#x2F;libs&#x2F;**&quot;]) &#x2F;&#x2F;排除的js
        .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&quot;)))
        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress JS:&quot; &#125;)))
        .pipe(plumber())
        .pipe(
            gulpBabel(&#123;
                presets: [es2015Preset] &#x2F;&#x2F; es5检查机制
            &#125;)
        )
        .pipe(uglify()) &#x2F;&#x2F;调用压缩组件方法uglify(),对合并的文件进行压缩
        .pipe(gulp.dest(&quot;.&#x2F;public&quot;)); &#x2F;&#x2F;输出到目标目录
&#125;);

&#x2F;&#x2F; 压缩public目录下的css文件
gulp.task(&quot;compressCss&quot;, function () &#123;
    var option &#x3D; &#123;
        rebase: false,
        &#x2F;&#x2F;advanced: true, &#x2F;&#x2F;类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]
        compatibility: &quot;ie7&quot; &#x2F;&#x2F;保留ie7及以下兼容写法 类型：String 默认：&#39;&#39;or&#39;*&#39; [启用兼容模式； &#39;ie7&#39;：IE7兼容模式，&#39;ie8&#39;：IE8兼容模式，&#39;*&#39;：IE9+兼容模式]
        &#x2F;&#x2F;keepBreaks: true, &#x2F;&#x2F;类型：Boolean 默认：false [是否保留换行]
        &#x2F;&#x2F;keepSpecialComments: &#39;*&#39; &#x2F;&#x2F;保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀
    &#125;;
    return gulp
        .src([&quot;.&#x2F;public&#x2F;**&#x2F;*.css&quot;, &quot;!.&#x2F;public&#x2F;**&#x2F;*.min.css&quot;]) &#x2F;&#x2F;排除的css
        .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&quot;)))
        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress CSS:&quot; &#125;)))
        .pipe(plumber())
        .pipe(cleancss(option))
        .pipe(gulp.dest(&quot;.&#x2F;public&quot;));
&#125;);

&#x2F;&#x2F; 压缩public目录下的html文件
gulp.task(&quot;compressHtml&quot;, function () &#123;
    var cleanOptions &#x3D; &#123;
        protect: &#x2F;&lt;\!--%fooTemplate\b.*?%--&gt;&#x2F;g, &#x2F;&#x2F;忽略处理
        unprotect: &#x2F;&lt;script [^&gt;]*\btype&#x3D;&quot;text\&#x2F;x-handlebars-template&quot;[\s\S]+?&lt;\&#x2F;script&gt;&#x2F;gi &#x2F;&#x2F;特殊处理
    &#125;;
    var minOption &#x3D; &#123;
        collapseWhitespace: true, &#x2F;&#x2F;压缩HTML
        collapseBooleanAttributes: true, &#x2F;&#x2F;省略布尔属性的值 &lt;input checked&#x3D;&quot;true&quot;&#x2F;&gt; &#x3D;&#x3D;&gt; &lt;input &#x2F;&gt;
        removeEmptyAttributes: true, &#x2F;&#x2F;删除所有空格作属性值 &lt;input id&#x3D;&quot;&quot; &#x2F;&gt; &#x3D;&#x3D;&gt; &lt;input &#x2F;&gt;
        removeScriptTypeAttributes: true, &#x2F;&#x2F;删除&lt;script&gt;的type&#x3D;&quot;text&#x2F;javascript&quot;
        removeStyleLinkTypeAttributes: true, &#x2F;&#x2F;删除&lt;style&gt;和&lt;link&gt;的type&#x3D;&quot;text&#x2F;css&quot;
        removeComments: true, &#x2F;&#x2F;清除HTML注释
        minifyJS: true, &#x2F;&#x2F;压缩页面JS
        minifyCSS: true, &#x2F;&#x2F;压缩页面CSS
        minifyURLs: true &#x2F;&#x2F;替换页面URL
    &#125;;
    return gulp
        .src(&quot;.&#x2F;public&#x2F;**&#x2F;*.html&quot;)
        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress HTML:&quot; &#125;)))
        .pipe(plumber())
        .pipe(htmlclean(cleanOptions))
        .pipe(htmlmin(minOption))
        .pipe(gulp.dest(&quot;.&#x2F;public&quot;));
&#125;);

&#x2F;&#x2F; 压缩 public&#x2F;medias 目录内图片
gulp.task(&quot;compressImage&quot;, function () &#123;
    var option &#x3D; &#123;
        optimizationLevel: 5, &#x2F;&#x2F;类型：Number 默认：3 取值范围：0-7（优化等级）
        progressive: true, &#x2F;&#x2F;类型：Boolean 默认：false 无损压缩jpg图片
        interlaced: false, &#x2F;&#x2F;类型：Boolean 默认：false 隔行扫描gif进行渲染
        multipass: false &#x2F;&#x2F;类型：Boolean 默认：false 多次优化svg直到完全优化
    &#125;;
    return gulp
        .src(&quot;.&#x2F;public&#x2F;medias&#x2F;**&#x2F;*.*&quot;)
        .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&#x2F;medias&quot;)))
        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress Images:&quot; &#125;)))
        .pipe(plumber())
        .pipe(imagemin(option))
        .pipe(gulp.dest(&quot;.&#x2F;public&quot;));
&#125;);
&#x2F;&#x2F; 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器
gulp.task(
    &quot;build&quot;,
    gulp.series(
        &quot;clean&quot;,
        &quot;generate&quot;,
        &quot;compressHtml&quot;,
        &quot;compressCss&quot;,
        &quot;compressJs&quot;,
        &quot;compressImage&quot;,
        gulp.parallel(&quot;deploy&quot;)
    )
);

&#x2F;&#x2F; 默认任务
gulp.task(
    &quot;default&quot;,
    gulp.series(
        &quot;clean&quot;,
        &quot;generate&quot;,
        gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressJs&quot;,&quot;compressImage&quot;)
    )
);
&#x2F;&#x2F;Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</code></pre></li>
<li>以后执行方式有两种：<ul>
<li>直接在Hexo根目录执行 <code>gulp</code> 或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl &amp;&amp; hexo g</code> 并且再把代码和图片压缩。</li>
<li>在Hexo根目录执行 <code>gulp build</code> ，这个命令与第1种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li>
</ul>
</li>
<li>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 <code>&quot;compressImage&quot;</code>, 和第165行的 ,<code>&quot;compressImage&quot;</code> 去掉即可<h4 id="hexo-neat插件实现代码压缩"><a href="#hexo-neat插件实现代码压缩" class="headerlink" title="hexo-neat插件实现代码压缩"></a>hexo-neat插件实现代码压缩</h4></li>
<li>可能以上方法比较复杂，来介绍个简单的，<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a>插件也是用来压缩代码的，底层也是通过gulp来实现的。</li>
<li>但是这个插件是有Bug的：<br>  1.压缩 md 文件会使 markdown 语法的代码块消失<br>  2.会删除全角空格</li>
<li>Hexo根目录执行安装代码：<pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-neat --save</code></pre></li>
<li>在Hexo配置文件 <code>_config.yml</code> 末尾加入以下配置：<pre class="line-numbers language-none"><code class="language-none">neat_enable: true
neat_html:
  enable: true
  exclude:
neat_css:
  enable: true
  exclude:
    - &#39;*.min.css&#39;
neat_js:
  enable: true
  mangle: true
  output:
  compress:
  exclude:
    - &#39;*.min.js&#39;</code></pre></li>
<li>然后直接<code>hexo cl &amp;&amp; hexo g</code>就可以了，会自动压缩文件。</li>
<li><strong>补充</strong>：为了解决以上Bug，<strong>对于matery主题</strong>需要将以上的默认配置修改为：<pre class="line-numbers language-none"><code class="language-none">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）
neat_enable: true
neat_html:
  enable: true
  exclude:
    - &#39;**&#x2F;*.md&#39;
neat_css:
  enable: true
  exclude:
    - &#39;**&#x2F;*.min.css&#39;
neat_js:
  enable: true
  mangle: true
  output:
  compress:
  exclude:
    - &#39;**&#x2F;*.min.js&#39;
    - &#39;**&#x2F;**&#x2F;instantpage.js&#39;
    - &#39;**&#x2F;matery.js&#39;</code></pre></li>
</ul>
]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>The beginning of everything</title>
    <url>//post/wo-de-di-yi-pian-bo-ke-wen-zhang.html</url>
    <content><![CDATA[<h1 id="梦开始的地方……"><a href="#梦开始的地方……" class="headerlink" title="梦开始的地方……"></a>梦开始的地方……</h1><p>也许眼前充满着苟且，但学习是为了诗和远方……</p>
<span id="more"></span>
<p>选择了物联网这个专业，注定要和电脑打很多的交道，需要了解很多关于网络上的知识，刚开始对这门专业并没有多大的感兴趣，大一期间也不会经常使用自己的电脑，自己的电脑一天到晚在寝室睡大觉，也不清楚自己要干嘛，但是，在学习了很多关于各种网络的知识之后，又觉得这又是个很酷的行业，就是有点费头发，装酷起来是真的装酷，之前会看过别人自己搭建的博客网站后，觉得十分的炫酷，也会想自己是不是也能搭建一个属于自己的博客网站。经过自己在网上查一些有关这方面的知识，了解过后发现这想上手也不是很难，便开始自己着手搭建了起来，然后便有了你们现在看到的这个博客网站，当然，它是属于我的。</p>
<p>其实很早之前自己开始想建一个自己的博客网站</p>
]]></content>
      <categories>
        <category>pleasure</category>
      </categories>
      <tags>
        <tag>share</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要写博客</title>
    <url>//post/wei-shi-me-yao-xie-bo-ke.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>1972年，D.M.Ritchie用C语言写出了世界上第一个C语言程序<code>&quot;Hello World&quot;</code>！<br>五十年后的现在——2022年的今天，我也来<code>&quot;Hello Blog&quot;</code>一下！</p>
<hr>
<h1 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h1><p><strong>准确的来说</strong>，是为什么你应该从现在开始就写博客。</p>
<blockquote>
<p>写一个博客有很多的好处，却没有任何明显的坏处。<br>（阿灵顿的情况属于例外，而非常态，就像不能拿抽烟活到一百岁的英国老太太的个例来反驳抽烟对健康的极大损伤一样）</p>
</blockquote>
<hr>
<h1 id="写博客的好处"><a href="#写博客的好处" class="headerlink" title="写博客的好处"></a>写博客的好处</h1><h2 id="1-可以交到志同道合的朋友"><a href="#1-可以交到志同道合的朋友" class="headerlink" title="1.可以交到志同道合的朋友"></a>1.可以交到志同道合的朋友</h2><p>我写博客，也会去浏览别人的博客，在我们这个高度信息化的时代，拓展朋友圈的一个重要的途径毫无疑问是，通过网络，而如何在这个网络的大世界中找到气味相投的朋友，如何判断别人和自己是否有共同的语言？读取他人的博客，体会他人所写文章中的感受；写自己的博客，让别人也能够了解自己，我很佩服一些能够用博客记录自己想法的人，向他们学习，这也是我决定写一个自己的博客的重要原因。<br><strong>为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，</strong><br>第一：博客无地域限制，整个互联网上从A到B只有一个点击的距离；<br>第二：也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，<strong>用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”。</strong></p>
<hr>
<h2 id="2-书写是为了更好地思考"><a href="#2-书写是为了更好地思考" class="headerlink" title="2.书写是为了更好地思考"></a>2.书写是为了更好地思考</h2><p>这里引用一个广为流传的《数学牛人们的趣事》：</p>
<blockquote>
<p>有关于希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。</p>
</blockquote>
<hr>
<h2 id="3-“教”是最好的“学”"><a href="#3-“教”是最好的“学”" class="headerlink" title="3.“教”是最好的“学”"></a>3.“教”是最好的“学”</h2><p><strong>如果有一件事情你不能给别人讲清楚，十有八九你还没有完全理解。</strong>绝大多数人都应该知道在程序员面试的时候，面试官经常会要求你讲解一个东西给他听，他会说他不懂这个东西（如果他是真的不懂，你应该窃喜了），而你的任务就是讲到让他理解为止。</p>
<p>大二时期，教我们单片机老师就给我们讲过，考研复试的时候，如果你的导师和你聊的时间越久，说明你录取的几率更大，因为你的导师他会由难到易的问你问题，直到把你问倒了，他才会心满意足，这想必是很多导师的“虚荣心”；如果你复试的时间很短，并不是代表你很顺利，而是代表着你两下就被打发，你的导师问你简单的问题都无法回答，所以你应该反思……</p>
<p>所以我们平时就要养成一个能把自己学会的东西，会教给他人的习惯，写博客无疑是一个很好的途径。</p>
<hr>
<h2 id="4-激励自己去持续学习和思考"><a href="#4-激励自己去持续学习和思考" class="headerlink" title="4.激励自己去持续学习和思考"></a>4.激励自己去持续学习和思考</h2><p>如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…</p>
<p>为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。</p>
<p><strong>我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。</strong></p>
<hr>
<h2 id="5-学会持之以恒地做一件事情"><a href="#5-学会持之以恒地做一件事情" class="headerlink" title="5.学会持之以恒地做一件事情"></a>5.学会持之以恒地做一件事情</h2><p>很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。</p>
<hr>
<h2 id="6-一个长期的价值博客是一份很好的简历"><a href="#6-一个长期的价值博客是一份很好的简历" class="headerlink" title="6.一个长期的价值博客是一份很好的简历"></a>6.一个长期的价值博客是一份很好的简历</h2>]]></content>
      <categories>
        <category>pleasure</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
